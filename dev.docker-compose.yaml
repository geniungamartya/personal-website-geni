version: "3"

services:
  reverse-proxy:
    # The official v3 Traefik docker image
    image: traefik:v3.3
    # Enables the web UI and tells Traefik to listen to docker
    container_name: reverse-proxy
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      - --api.insecure=true # DEV ONLY
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    restart: always
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      # Make Traefik use this domain (from an environment variable) in HTTP
      - traefik.http.routers.traefik-dashboard-http.entrypoints=http
      - traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.${DOMAIN?Variable not set}`)

  frontend:
    image: nginx:alpine
    platform: linux/amd64
    container_name: frontend
    volumes:
      - ./conf/nginx/dev.frontend.nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/dist:/var/www/vite-app
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.services.frontend.loadbalancer.server.port=80
      # Http
      - traefik.http.routers.frontend-http.rule=Host(`blog.${DOMAIN?Variable not set}`)
      - traefik.http.routers.frontend-http.entrypoints=http

  minio:
    image: quay.io/minio/minio:RELEASE.2025-03-12T18-04-18Z-cpuv1
    platform: linux/amd64
    container_name: storage
    env_file: .env
    command: server /data --console-address ":9001"
    labels:
      - traefik.enable=true

      # MINIO API
      - traefik.http.services.storage.loadbalancer.server.port=9000
      # Http
      - traefik.http.routers.storage-http.rule=Host(`storage.${DOMAIN?Variable not set}`)
      - traefik.http.routers.storage-http.entrypoints=http
      - traefik.http.routers.storage-http.service=storage

      # MINIO UI
      - traefik.http.services.console-storage.loadbalancer.server.port=9001
      # Http
      - traefik.http.routers.console-storage-http.rule=Host(`console-storage.${DOMAIN?Variable not set}`)
      - traefik.http.routers.console-storage-http.entrypoints=http
      - traefik.http.routers.console-storage-http.service=console-storage
    volumes:
      - minio-data:/data

  # db:
  #   image: postgis/postgis:15-3.4
  #   container_name: db
  #   platform: linux/amd64
  #   restart: always
  #   env_file:
  #     - .env
  #   ports:
  #     - "15432:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
  #     # test:
  #     #   [
  #     #     "CMD-SHELL",
  #     #     "pg_isready -U postgres -d terra-postgis && [ $(psql -U postgres -d terra-postgis -tAc 'SELECT COUNT(*) FROM pg_extension;') -ge 5 ]",
  #     #   ]
  #     interval: 5s
  #     retries: 10
  #     timeout: 10s

volumes:
  # Create a volume to store the certificates, even if the container is recreated
  traefik-public-certificates:
  minio-data:
