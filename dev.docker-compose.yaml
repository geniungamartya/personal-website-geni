version: "3"

services:
  reverse-proxy:
    # The official v3 Traefik docker image
    image: traefik:v3.3
    # Enables the web UI and tells Traefik to listen to docker
    container_name: reverse-proxy
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80

      - --api.insecure=true
      # # PRODUCTION
      # # Create an entrypoint "https" listening on port 443
      # - --entrypoints.https.address=:443
      # # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      # - --certificatesresolvers.le.acme.email=${EMAIL?Variable not set}
      # # Store the Let's Encrypt certificates in the mounted volume
      # - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # # Use the TLS Challenge for Let's Encrypt
      # - --certificatesresolvers.le.acme.tlschallenge=true
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    restart: always
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      # Make Traefik use this domain (from an environment variable) in HTTP
      - traefik.http.routers.traefik-dashboard-http.entrypoints=http
      - traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.${DOMAIN?Variable not set}`)
      # # PRODUCTION
      # # traefik-https the actual router using HTTPS
      # - traefik.http.routers.traefik-dashboard-https.entrypoints=https
      # - traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.${DOMAIN?Variable not set}`)
      # - traefik.http.routers.traefik-dashboard-https.tls=true
      # # Use the "le" (Let's Encrypt) resolver created below
      # - traefik.http.routers.traefik-dashboard-https.tls.certresolver=le
      # # Use the special Traefik service api@internal with the web UI/Dashboard
      # - traefik.http.routers.traefik-dashboard-https.service=api@internal
      # # https-redirect middleware to redirect HTTP to HTTPS
      # - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      # - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # # traefik-http set up only to use the middleware to redirect to https
      # - traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect
      # # admin-auth middleware with HTTP Basic auth
      # # Using the environment variables USERNAME and HASHED_PASSWORD
      # - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}
      # # Enable HTTP Basic auth, using the middleware created above
      # - traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth
  frontend:
    image: nginx:alpine
    platform: linux/amd64
    container_name: frontend
    volumes:
      - ./conf/nginx/dev.frontend.nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/dist:/var/www/vite-app
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.services.frontend.loadbalancer.server.port=80
      # Http
      - traefik.http.routers.frontend-http.rule=Host(`blog.${DOMAIN?Variable not set}`)
      - traefik.http.routers.frontend-http.entrypoints=http
      # PRODUCTION
      # # Https
      # - traefik.http.routers.frontend-https.rule=Host(`blog.${DOMAIN?Variable not set}`)
      # - traefik.http.routers.frontend-https.entrypoints=https
      # - traefik.http.routers.frontend-https.tls=true
      # - traefik.http.routers.frontend-https.tls.certresolver=le
      # # Enable redirection for HTTP and HTTPS
      # - traefik.http.routers.frontend-http.middlewares=https-redirect

  minio:
    image: quay.io/minio/minio:RELEASE.2025-03-12T18-04-18Z-cpuv1
    platform: linux/amd64
    container_name: storage
    env_file: .env
    command: server /data --console-address ":9001"
    labels:
      - traefik.enable=true

      # MINIO API
      - traefik.http.services.storage.loadbalancer.server.port=9000
      # Http
      - traefik.http.routers.storage-http.rule=Host(`storage.${DOMAIN?Variable not set}`)
      - traefik.http.routers.storage-http.entrypoints=http
      - traefik.http.routers.storage-http.service=storage
      # # PRODUCTION
      # # Https
      # - traefik.http.routers.storage-https.rule=Host(`storage.${DOMAIN?Variable not set}`)
      # - traefik.http.routers.storage-https.entrypoints=https
      # - traefik.http.routers.storage-https.service=storage
      # - traefik.http.routers.storage-https.tls=true
      # - traefik.http.routers.storage-https.tls.certresolver=le
      # # Enable redirection for HTTP and HTTPS
      # - traefik.http.routers.storage-http.middlewares=https-redirect

      # MINIO UI
      - traefik.http.services.console-storage.loadbalancer.server.port=9001
      # Http
      - traefik.http.routers.console-storage-http.rule=Host(`console-storage.${DOMAIN?Variable not set}`)
      - traefik.http.routers.console-storage-http.entrypoints=http
      - traefik.http.routers.console-storage-http.service=console-storage
      # # PRODUCTION
      # # Https
      # - traefik.http.routers.console-storage-https.rule=Host(`console-storage.${DOMAIN?Variable not set}`)
      # - traefik.http.routers.console-storage-https.entrypoints=https
      # - traefik.http.routers.console-storage-https.service=console-storage
      # - traefik.http.routers.console-storage-https.tls=true
      # - traefik.http.routers.console-storage-https.tls.certresolver=le
      # # Enable redirection for HTTP and HTTPS
      # - traefik.http.routers.console-storage-http.middlewares=https-redirect

  db:
    image: postgis/postgis:15-3.4
    container_name: db
    platform: linux/amd64
    restart: always
    env_file:
      - .env
    ports:
      - "15432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      # test:
      #   [
      #     "CMD-SHELL",
      #     "pg_isready -U postgres -d terra-postgis && [ $(psql -U postgres -d terra-postgis -tAc 'SELECT COUNT(*) FROM pg_extension;') -ge 5 ]",
      #   ]
      interval: 5s
      retries: 10
      timeout: 10s

volumes:
  # Create a volume to store the certificates, even if the container is recreated
  traefik-public-certificates:
