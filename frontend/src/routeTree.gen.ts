/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LoginImport } from "./routes/login";
import { Route as AdminImport } from "./routes/admin";
import { Route as LayoutImport } from "./routes/_layout";
import { Route as AdminIndexImport } from "./routes/admin.index";
import { Route as LayoutIndexImport } from "./routes/_layout/index";
import { Route as AdminUsersImport } from "./routes/admin.users";
import { Route as AdminBlogImport } from "./routes/admin.blog";
import { Route as LayoutPlaygroundImport } from "./routes/_layout/playground";
import { Route as LayoutPhotoVideoImport } from "./routes/_layout/photo-video";
import { Route as LayoutBlogImport } from "./routes/_layout/blog";
import { Route as LayoutBlogIndexImport } from "./routes/_layout/blog.index";
import { Route as LayoutBlogEditorImport } from "./routes/_layout/blog.editor";
import { Route as LayoutBlogSlugImport } from "./routes/_layout/blog.$slug";

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const AdminRoute = AdminImport.update({
  id: "/admin",
  path: "/admin",
  getParentRoute: () => rootRoute,
} as any);

const LayoutRoute = LayoutImport.update({
  id: "/_layout",
  getParentRoute: () => rootRoute,
} as any);

const AdminIndexRoute = AdminIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AdminRoute,
} as any);

const LayoutIndexRoute = LayoutIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => LayoutRoute,
} as any);

const AdminUsersRoute = AdminUsersImport.update({
  id: "/users",
  path: "/users",
  getParentRoute: () => AdminRoute,
} as any);

const AdminBlogRoute = AdminBlogImport.update({
  id: "/blog",
  path: "/blog",
  getParentRoute: () => AdminRoute,
} as any);

const LayoutPlaygroundRoute = LayoutPlaygroundImport.update({
  id: "/playground",
  path: "/playground",
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutPhotoVideoRoute = LayoutPhotoVideoImport.update({
  id: "/photo-video",
  path: "/photo-video",
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutBlogRoute = LayoutBlogImport.update({
  id: "/blog",
  path: "/blog",
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutBlogIndexRoute = LayoutBlogIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => LayoutBlogRoute,
} as any);

const LayoutBlogEditorRoute = LayoutBlogEditorImport.update({
  id: "/editor",
  path: "/editor",
  getParentRoute: () => LayoutBlogRoute,
} as any);

const LayoutBlogSlugRoute = LayoutBlogSlugImport.update({
  id: "/$slug",
  path: "/$slug",
  getParentRoute: () => LayoutBlogRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_layout": {
      id: "/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof LayoutImport;
      parentRoute: typeof rootRoute;
    };
    "/admin": {
      id: "/admin";
      path: "/admin";
      fullPath: "/admin";
      preLoaderRoute: typeof AdminImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout/blog": {
      id: "/_layout/blog";
      path: "/blog";
      fullPath: "/blog";
      preLoaderRoute: typeof LayoutBlogImport;
      parentRoute: typeof LayoutImport;
    };
    "/_layout/photo-video": {
      id: "/_layout/photo-video";
      path: "/photo-video";
      fullPath: "/photo-video";
      preLoaderRoute: typeof LayoutPhotoVideoImport;
      parentRoute: typeof LayoutImport;
    };
    "/_layout/playground": {
      id: "/_layout/playground";
      path: "/playground";
      fullPath: "/playground";
      preLoaderRoute: typeof LayoutPlaygroundImport;
      parentRoute: typeof LayoutImport;
    };
    "/admin/blog": {
      id: "/admin/blog";
      path: "/blog";
      fullPath: "/admin/blog";
      preLoaderRoute: typeof AdminBlogImport;
      parentRoute: typeof AdminImport;
    };
    "/admin/users": {
      id: "/admin/users";
      path: "/users";
      fullPath: "/admin/users";
      preLoaderRoute: typeof AdminUsersImport;
      parentRoute: typeof AdminImport;
    };
    "/_layout/": {
      id: "/_layout/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof LayoutIndexImport;
      parentRoute: typeof LayoutImport;
    };
    "/admin/": {
      id: "/admin/";
      path: "/";
      fullPath: "/admin/";
      preLoaderRoute: typeof AdminIndexImport;
      parentRoute: typeof AdminImport;
    };
    "/_layout/blog/$slug": {
      id: "/_layout/blog/$slug";
      path: "/$slug";
      fullPath: "/blog/$slug";
      preLoaderRoute: typeof LayoutBlogSlugImport;
      parentRoute: typeof LayoutBlogImport;
    };
    "/_layout/blog/editor": {
      id: "/_layout/blog/editor";
      path: "/editor";
      fullPath: "/blog/editor";
      preLoaderRoute: typeof LayoutBlogEditorImport;
      parentRoute: typeof LayoutBlogImport;
    };
    "/_layout/blog/": {
      id: "/_layout/blog/";
      path: "/";
      fullPath: "/blog/";
      preLoaderRoute: typeof LayoutBlogIndexImport;
      parentRoute: typeof LayoutBlogImport;
    };
  }
}

// Create and export the route tree

interface LayoutBlogRouteChildren {
  LayoutBlogSlugRoute: typeof LayoutBlogSlugRoute;
  LayoutBlogEditorRoute: typeof LayoutBlogEditorRoute;
  LayoutBlogIndexRoute: typeof LayoutBlogIndexRoute;
}

const LayoutBlogRouteChildren: LayoutBlogRouteChildren = {
  LayoutBlogSlugRoute: LayoutBlogSlugRoute,
  LayoutBlogEditorRoute: LayoutBlogEditorRoute,
  LayoutBlogIndexRoute: LayoutBlogIndexRoute,
};

const LayoutBlogRouteWithChildren = LayoutBlogRoute._addFileChildren(
  LayoutBlogRouteChildren,
);

interface LayoutRouteChildren {
  LayoutBlogRoute: typeof LayoutBlogRouteWithChildren;
  LayoutPhotoVideoRoute: typeof LayoutPhotoVideoRoute;
  LayoutPlaygroundRoute: typeof LayoutPlaygroundRoute;
  LayoutIndexRoute: typeof LayoutIndexRoute;
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutBlogRoute: LayoutBlogRouteWithChildren,
  LayoutPhotoVideoRoute: LayoutPhotoVideoRoute,
  LayoutPlaygroundRoute: LayoutPlaygroundRoute,
  LayoutIndexRoute: LayoutIndexRoute,
};

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren);

interface AdminRouteChildren {
  AdminBlogRoute: typeof AdminBlogRoute;
  AdminUsersRoute: typeof AdminUsersRoute;
  AdminIndexRoute: typeof AdminIndexRoute;
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminBlogRoute: AdminBlogRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
};

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren);

export interface FileRoutesByFullPath {
  "": typeof LayoutRouteWithChildren;
  "/admin": typeof AdminRouteWithChildren;
  "/login": typeof LoginRoute;
  "/blog": typeof LayoutBlogRouteWithChildren;
  "/photo-video": typeof LayoutPhotoVideoRoute;
  "/playground": typeof LayoutPlaygroundRoute;
  "/admin/blog": typeof AdminBlogRoute;
  "/admin/users": typeof AdminUsersRoute;
  "/": typeof LayoutIndexRoute;
  "/admin/": typeof AdminIndexRoute;
  "/blog/$slug": typeof LayoutBlogSlugRoute;
  "/blog/editor": typeof LayoutBlogEditorRoute;
  "/blog/": typeof LayoutBlogIndexRoute;
}

export interface FileRoutesByTo {
  "/login": typeof LoginRoute;
  "/photo-video": typeof LayoutPhotoVideoRoute;
  "/playground": typeof LayoutPlaygroundRoute;
  "/admin/blog": typeof AdminBlogRoute;
  "/admin/users": typeof AdminUsersRoute;
  "/": typeof LayoutIndexRoute;
  "/admin": typeof AdminIndexRoute;
  "/blog/$slug": typeof LayoutBlogSlugRoute;
  "/blog/editor": typeof LayoutBlogEditorRoute;
  "/blog": typeof LayoutBlogIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_layout": typeof LayoutRouteWithChildren;
  "/admin": typeof AdminRouteWithChildren;
  "/login": typeof LoginRoute;
  "/_layout/blog": typeof LayoutBlogRouteWithChildren;
  "/_layout/photo-video": typeof LayoutPhotoVideoRoute;
  "/_layout/playground": typeof LayoutPlaygroundRoute;
  "/admin/blog": typeof AdminBlogRoute;
  "/admin/users": typeof AdminUsersRoute;
  "/_layout/": typeof LayoutIndexRoute;
  "/admin/": typeof AdminIndexRoute;
  "/_layout/blog/$slug": typeof LayoutBlogSlugRoute;
  "/_layout/blog/editor": typeof LayoutBlogEditorRoute;
  "/_layout/blog/": typeof LayoutBlogIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ""
    | "/admin"
    | "/login"
    | "/blog"
    | "/photo-video"
    | "/playground"
    | "/admin/blog"
    | "/admin/users"
    | "/"
    | "/admin/"
    | "/blog/$slug"
    | "/blog/editor"
    | "/blog/";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/login"
    | "/photo-video"
    | "/playground"
    | "/admin/blog"
    | "/admin/users"
    | "/"
    | "/admin"
    | "/blog/$slug"
    | "/blog/editor"
    | "/blog";
  id:
    | "__root__"
    | "/_layout"
    | "/admin"
    | "/login"
    | "/_layout/blog"
    | "/_layout/photo-video"
    | "/_layout/playground"
    | "/admin/blog"
    | "/admin/users"
    | "/_layout/"
    | "/admin/"
    | "/_layout/blog/$slug"
    | "/_layout/blog/editor"
    | "/_layout/blog/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren;
  AdminRoute: typeof AdminRouteWithChildren;
  LoginRoute: typeof LoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/admin",
        "/login"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/blog",
        "/_layout/photo-video",
        "/_layout/playground",
        "/_layout/"
      ]
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/blog",
        "/admin/users",
        "/admin/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_layout/blog": {
      "filePath": "_layout/blog.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/blog/$slug",
        "/_layout/blog/editor",
        "/_layout/blog/"
      ]
    },
    "/_layout/photo-video": {
      "filePath": "_layout/photo-video.tsx",
      "parent": "/_layout"
    },
    "/_layout/playground": {
      "filePath": "_layout/playground.tsx",
      "parent": "/_layout"
    },
    "/admin/blog": {
      "filePath": "admin.blog.tsx",
      "parent": "/admin"
    },
    "/admin/users": {
      "filePath": "admin.users.tsx",
      "parent": "/admin"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/admin/": {
      "filePath": "admin.index.tsx",
      "parent": "/admin"
    },
    "/_layout/blog/$slug": {
      "filePath": "_layout/blog.$slug.tsx",
      "parent": "/_layout/blog"
    },
    "/_layout/blog/editor": {
      "filePath": "_layout/blog.editor.tsx",
      "parent": "/_layout/blog"
    },
    "/_layout/blog/": {
      "filePath": "_layout/blog.index.tsx",
      "parent": "/_layout/blog"
    }
  }
}
ROUTE_MANIFEST_END */
